import Footer from "../Components/Footer";
import { useSelector } from "react-redux";
import { RootState } from "../Redux/Store";
import { useDispatch } from "react-redux";
import { ButtonTalle, addTalle } from "../Redux/Slice"; // –î–æ–±–∞–≤–ª—è–µ–º setCount –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
import { useState, useEffect } from "react";
import { Contry } from "../Components/Data";
import tangard from "./../Img/coin.png";
import { db, doc, setDoc, getDoc } from "./../Components/firebase";

const thresholds = [10, 1000, 10000];
const imageIndices = [0, 1, 2];

export default function Game() {
    const [mec, setMec] = useState(0);
    const count = useSelector((state: RootState) => state.counter.value);
    const dispatch = useDispatch();
    const userId = "user1"; // –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ ID —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    // üìå –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–∫–æ–≤
    const saveScore = async (score: number) => {
        try {
            await setDoc(doc(db, "scores", userId), { score });
            console.log("–û—á–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Firebase:", score);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–∫–æ–≤:", error);
        }
    };

    // üìå –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—á–∫–æ–≤
    const loadScore = async (): Promise<number> => {
        try {
            const docSnap = await getDoc(doc(db, "scores", userId));
            if (docSnap.exists()) {
                console.log("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –æ—á–∫–∏:", docSnap.data().score);
                return docSnap.data().score;
            } else {
                return 0;
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—á–∫–æ–≤:", error);
            return 0;
        }
    };

    // üìå –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—á–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã
    useEffect(() => {
        const fetchScore = async () => {
            const savedScore = await loadScore(); // –¢–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞
            dispatch(addTalle(savedScore));
        };
    
        fetchScore();
    }, [dispatch]);

    // üìå –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∫–∏ –ø—Ä–∏ –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    useEffect(() => {
        saveScore(count);
    }, [count]);

    // üìå –õ–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø—Ä–∏ –Ω–∞–±–æ—Ä–µ –æ—á–∫–æ–≤
    useEffect(() => {
        let newMec = 0;
        for (let i = 0; i < thresholds.length; i++) {
            if (count >= thresholds[i]) {
                newMec = imageIndices[i];
            } else {
                break;
            }
        }

        if (newMec !== mec) {
            setMec(newMec);
        }
    }, [count, mec]);


    return (
        <div className="game-countainer">

            <h1 className="title-game">TAGAND</h1>

            <div className="buttomsheet">
                <div className="coin-div">
                    <p className="coin-p">
                        <img className="coin-img" src={tangard} alt="coin" /> : {count}
                    </p>
                </div>

                <div className="contry-div">
                    {Contry[mec] && (
                        <img className="contry-img" src={Contry[mec].size} alt="Armenia" />
                    )}
                </div>

                <button onClick={() => dispatch(ButtonTalle())} className="game-btn">+</button>

                <Footer />
            </div>
        </div>
    );
}
